---
date: 2012-09-12
---
_Graphene 2_ is building on top of Selenium WebDriver API and provides extensions for writing *reusable*, *robust*, *AJAX-enabled* tests with improved *readability*.

_Graphene 2_ takes ideas brought by _Graphene 1_ (based on _Selenium 1 API_) and applies it to the world of "Selenium WebDriver":http://seleniumhq.org/projects/webdriver/.

You can read more about "Graphene 1 and Graphene 2 differences":https://docs.jboss.org/author/pages/viewpage.action?pageId=53118297 .

h3. Features

h4. "Page Abstractions":https://docs.jboss.org/author/display/ARQGRA2/Page+Abstractions

Page abstractions allows you to abstract page functionality using well-known Selenium design pattern "_Page Objects_":http://code.google.com/p/selenium/wiki/PageObjects. Graphene helps you here and allows you to inject page objects into test case using @@Page@.

But Graphene also takes _Page Objects_ pattern one step further with a concept of "_Page Fragments_":https://docs.jboss.org/author/display/ARQGRA2/Page+Fragments . _Page Fragments_ are reusable part of a page encapsulated into an object similarly to _Page Objects_. A great example for such an encapsulation are JavaScript widgets or forms.

The concept of _Page Fragments_ comes from an idea that those components share a same underlying DOM structure, the only difference between all occurences of a component is a location in a DOM tree where a component is rendered - this is denoted by @@Root@ annotation. You can define this root location for each concrete occurence using a @@FindBy(locator)@ annotation.


h4. "Fluent-API for Waiting Conditions":https://docs.jboss.org/author/display/ARQGRA2/Graphene+Utility+Class

Graphene provides set of widely used "conditions to avoid writing them repeatedly":https://docs.jboss.org/author/display/ARQGRA2/Graphene+Utility+Class.

h4. "Request Guards":https://docs.jboss.org/author/display/ARQGRA2/Request+Guards

Request guards block Selenium test execution until a network communication caused by a given action ends. Guards support blocking on _HTTP_, _XHR (AJAX)_ and they can also verify that no such request was done.

h4. Under the Hood

There are also features which are not used regularly, but which can be handy to write more robust tests and which Graphene uses internally:

h5. "JavaScript Interface":https://docs.jboss.org/author/display/ARQGRA2/JavaScript+Interface

This feature allows to manipulate with a Java interface which automatically translates Java API invocations to JavaScript calls:

bc(prettify).. @JavaScript
public interface Document {
    String getTitle();
}

h5. "Page Extensions":https://docs.jboss.org/author/display/ARQGRA2/Page+Extensions

Page Extensions allow you to inject arbitrary JavaScript code to the page under the test. This code might be necessary to help you test complex situations as well as bring completely new features for improving tests. Graphene internally uses _Page Extensions_ for _Request Guards_.

h5. "Graphene Context":https://docs.jboss.org/author/display/ARQGRA2/Graphene+Context+and+Proxy

Graphene allows you to obtain current thread-local context of a browser session and inject it exactly where you need. No more driver reference propagation.

h4. "Documentation":https://docs.jboss.org/author/display/ARQGRA2/Home

Last but definitely not smallest addition is "a great documentation":https://docs.jboss.org/author/display/ARQGRA2/Home for all of the features above including answers for general questions like "_how relates Selenium 1, Graphene 1, Selenium WebDriver and Graphene 2_":https://docs.jboss.org/author/pages/viewpage.action?pageId=53118297, what’s a "_relation of Graphene’s relation to Drone and Arquillian_":https://docs.jboss.org/author/display/ARQGRA2/Using+Drone.

h3. "Getting Started":https://docs.jboss.org/author/display/ARQGRA2/Getting+Started

It is a same like with any other Arquillian extension: let's open an IDE, setup a "Maven dependency":https://docs.jboss.org/author/display/ARQGRA2/Framework+Integration+Options and you are ready to "start with a code":https://docs.jboss.org/author/display/ARQGRA2/Getting+Started!

h3. What’s next?

In the upcoming releases, we would like to focus on many new features as well as migrate some features from Graphene 1 to Graphene 2:

* Forge plugin for quick start
* command interceptors
* parallel browser session control
* jQuery/Sizzle locators
* AJAX/HTTP Communication Halter
* page abstraction improvements
* closer integration to Arquillian event system
* helpers for writing browser specific code

h3. Call to Action

"Let us know what you think":https://community.jboss.org/en/arquillian and "help us shape the Graphene":issues.jboss.org/browse/ARQGRA to be what you want it to be.



