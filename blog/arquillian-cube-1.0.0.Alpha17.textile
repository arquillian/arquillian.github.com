---
date: 2017-02-02
author: lordofthejars
---

p. New version of Arquillian Cube 1.0.0.Alpha17 has been released with quite a bunch of enhancements and bugfixes.

h3. What's new

p. <i class="icon-star"></i> **Graphene URL autoresolution**

p. In previous versions, Graphene URL autoresolution uses a complex algorithm with absolute or relative URLs to detect which was the real URL in Docker space ("Old Autoresolution":https://github.com/arquillian/arquillian-cube/blob/1.0.0.Alpha16/docs/drone.adoc#graphene). This has been simplified so now only full URL are permitted.

p. In this version if URL contains @dockerHost@ this is resolved to docker host IP, if it contains an IP then this IP is used, if an string is provided, this is considered the container name and Arquillian Cube resolves to internal container IP.

p. <i class="icon-star"></i> **Support @@CubeIp@ in Container Objects**

p. Now a Container Object can also be enriched with internal IP of given container.

p. Thanks to "Ramon Rivas":https://github.com/rivasdiaz to provide the feature.

p. <i class="icon-star"></i> **Provide URL enrichment for standalone mode**

p. New enrichment is provided to construct a URL for black-box tests pointing to a given docker host and resolved exposed port.

bc(prettify).. @DockerUrl(protocol="http", containerName = "helloworld", exposedPort = "8080", context = "/hello")
@ArquillianResource
URL url;

p. In previous case URL is the docker host IP pointing to binding port of exposed port 8080 of container @helloworld@ and using @/hello@ as context.

p. <i class="icon-star"></i> **Set Environment variables for Container Objects**

p. Now you can set environment variables to defined container objects.

bc(prettify).. @Cube(“tomme”)
@Image("tomee:8-jre-1.7.2-webprofile")
@Environment("A=a")
@Environment("B=b")
public static class ImageContainerObject {
}

p. Annotation can also be used in field definition not just in class definition.

p. <i class="icon-star"></i> **Create Volumes for Container Objects**

bc(prettify).. @Cube(“tomme”)
@Image("tomee:8-jre-1.7.2-webprofile")
@Volume(hostPath = "/mypath", containerPath = "/containerPath")
@Volume(hostPath = "/mypath2", containerPath = "/containerPath2")
public static class ImageContainerObject {
}

p. Annotation can also be used in field definition not just in class definition.

p. <i class="icon-star"></i> **Add @@DockerUrl@ support for RestAssured enricher**

p. Now you can configure URL for REST-Assured integration using @@DockerUrl@ annotation.

bc(prettify).. @DockerUrl(containerName = "pingpong", exposedPort = 8080)
@ArquillianResource
RequestSpecBuilder requestSpecBuilder;

p. @RequestSpecBuilder@ is configured with docker host IP, and resolving port binding from container @pingpong@ and exposed port 8080.

p. <i class="icon-star"></i> **Provide a new url ResourceProvider for Kubernetes and Openshift**

Now you can get URL to connect to a Kubernetes/OpenShift service without having much hassle.

bc(prettify).. @Named("hello-world-service")
@PortForward
@ArquillianResource
URL url;

p. In this case a  URL is provided pointing directly to the service @hello-world@ so you can query it without any problem.

p. Thanks to "Ioannis Canellos":https://github.com/iocanel to provide this feature.
