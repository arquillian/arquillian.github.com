---
date: 2016-09-29
author: lordofthejars
---

p. Arquillian Pact is an extension that provides an integration between Arquillian and "Pact":https://docs.pact.io/.

h3 What's new

p. <i class="icon-star"></i> Maven Loader

p. Now you can use any Maven artifact to store contracts (pacts files). Then provider will resolve given artifact, uncompress it and execute the contracts found there.

p. To use it you need to import dependency:

bc(prettify).. <dependency>
  <groupId>org.arquillian.pact</groupId>
  <artifactId>arquillian-pact-provider-maven-loader</artifactId>
</dependency>

p. For example, this is how you can get contracts from a jar file stored at Maven repository. It is important to note that Arquillian Pact always takes the latest version of jar in case of not specifying one concrete version.

bc(prettify).. @PactMavenDependency(value = "org.superbiz:contract:[1.0,]")
public class MavenLoaderTest {}

p. <i class="icon-star"></i> Git Loader

p. Now you can get contracts from Git repository. The provider will clone/pull the repo and execute the contracts found there.

p. To use it you need to import dependency:

bc(prettify).. <dependency>
  <groupId>org.arquillian.pact</groupId>
  <artifactId>arquillian-pact-provider-git-loader</artifactId>
</dependency>

p. For example, this is how you can get contracts form a public Git repository:

bc(prettify).. @PactGit("https://github.com/lordofthejars/starwarspact.git")
public class GitLoaderTest {}

p. Check __PactGit__ annotations to see the options for configuring authentication or set a concrete directory inside Git repo.

p. <i class="icon-star"></i> Output Directory

p. Now in consumer you can use __pactReportDir__ configuration property to set where contracts are generated.

For example, this is how you can generate contracts into target/contracts directory.

bc(prettify).. <extension qualifier="pact-consumer">
  <property name="pactReportDir">target/contracts</property>
</extension>

p. <i class="icon-star"></i> Enrichments

p. It is not mandatory to enrich your test with current consumer and current request response interaction. You can use two new Target methods for such:

bc(prettify).. @ArquillianResource
Target target;

target.testInteraction();

p. Or setting the URL directly instead of configuring it.

bc(prettify).. @ArquillianResource
Target target;

@ArquillianResource
URL webapp;

target.testInteraction(webapp);

p. You can still use previous methods where consumer and interaction where required, but in most of the cases you can relay on these methods.
