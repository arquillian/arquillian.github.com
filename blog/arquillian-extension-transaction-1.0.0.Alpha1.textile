---
tags: [ transaction ]
---

h3. Motivation

p. Until now the transaction handling in Arquillian has been provided by Arquillian Persistence Extension, but not soon ago
it appeared that there is a need to add support for transactions to other extension from the Arquillian universe.
In order to make that possible the transactions API had to be decoupled from Persistence Extension.

h3. Usage

p. API introduces pretty much simple declarative approach that allows to configure the transaction handling for particular
Arquillian tests by simply annotating them with @Transactional annotation. Through the extensions it is possible to set
the default transaction behaviour on successfully tests execution which can be to commit the transaction or rollback it.

p. Example:

bc(prettify).. @RunWith(Arquillian.class)
@Transactional
public class GreeterTestClass {

    public void defaultTest() throws Exception {
        // test code
    }

    @Transactional(value = TransactionMode.ROLLBACK)
    public void rollbackTest() throws Exception {
        // test code
    }
}


h3. SPI integration

.p The extension itself does not comes with implementation for concrete transaction API, they will be provided through
separate modules. During execution handling is delegated TransactionProvider which need to registered within Arquillian
runtime. Besides that the SPI defines set of events that and a separate scope binded to currently executing transaction.

h3. Implementations

.p Besides the JTA implementation provided by Persistence Extension, the next extensions which will come with transaction
support will be the Spring Extension. More detailed information will be announced soon with upcoming blog post.

