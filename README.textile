h1. !{vertical-align:middle}https://github.com/arquillian/arquillian.github.com/raw/develop/images/arquillian_icon_64.png! Arquillian Website Source

This repository contains the source of the Arquillian website (hosted using "github pages":http://pages.github.com), to which the "arquillian.org":arquillian.org hostname resolves.

The website is built using "Awestruct":awestruct.org. The develop branch contains the unprocessed website source. From that content, Awestruct generates a static website under the @_site@ directory. The website is published to the public site by pushing the contents of the @_site@ directory to the gh-pages branch.

h2. Setting Up Awestruct

You need to have Awestruct installed on your machine to preview the website locally. Awestruct is a available as Ruby gem in the GemCutter repository. You can install it into either a native Ruby or a JRuby installation. The instructions here will cover setting up Awestruct in a native Ruby installation in Linux.

Begin by installing the package for Ruby and RubyGems.

h3. Installing Ruby and RubyGems on Ubuntu

If you have Ubuntu, use this command to install Ruby and RubyGems:

bc. $ sudo apt-get install rubygems

Ubuntu does not currently add the RubyGems bin directory to your path. Put the following files in your shell configuration file (.bashrc) and restart the shell.

bc. $ export GEM_HOME=/var/lib/gems/1.8 \ 
export PATH=$PATH:$GEM_HOME/bin

Now the executables for any gem you install will be available on your path.

h3. Installing Ruby and RubyGems on Fedora

If you have Fedora, use this command to install Ruby:

bc. $ sudo yum install ruby ruby-devel ruby-libs ruby-mode ruby-rdoc ruby-irb ruby-ri ruby-docs ruby-mysql ruby-sqlite3

You then need to install RubyGems manually:

bc.. $ wget -q http://rubyforge.org/frs/download.php/55066/rubygems-1.3.2.tgz \
tar xzf rubygems-1.3.2.tgz \
cd rubygems-1.3.2 \
sudo ruby setup.rb

p. If you get stuck, refer to "this guide":http://www.technetra.com/2009/04/22/howto-setting-up-ruby-on-rails-for-fedora-10-and-11 for more details.

h3. Installing the Awestruct Gem

Now you are ready to install the awestruct gem and it's dependencies. The remainder of the commands work on any Ruby installation:

bc. $ sudo gem install awestruct

You're all set!

h3. Other Required Gems

As the website matures, more gems will be required. This section documents the required third-party gems not already installed by Awestruct.

* rest-client
* git

h2. Previewing the Site Locally

Now that you have awestruct installed, you can preview the website locally by running it in development mode. Development mode using a file monitor to automatically update the site when you make a change to the source files.

Run the following command to launch the preview server:

bc. awestruct -d

Visit the following page in your browser:

"http://localhost:4242":http://localhost:4242

You're now awestruct!

h2. Conventions

"Haml":http://haml-lang.com is the preferred abstract HTML markup language.

* "Haml Reference":http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html

 "Textile":http://redcloth.org/textile is the preferred text markup language.

* "Textile Reference":http://redcloth.org/textile

"Sass":http://sass-lang.com and "Compass":http://compass-style.org are the preferred CSS frameworks.

* "Sass Reference":http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html
* "Compass Reference":http://compass-style.org/reference/compass

Source files are indented using 2 spaces. Haml files require the same indentation size throughout.

h2. Page structure

* header#banner
** h2#logo
** nav#navigation
* #main
** h1
** #content
*** article
**** header
***** h2.title
***** div.byline
**** div.body
**** footer
** aside#sidebar
* footer

h2. Writing a Blog Entry

Writing a blog entry is very easy. All you have to do is fill in a brief prolog at the top of the file, then just type your content. The rest is handled for you.

h3. Filename

To write a blog entry, create a new textile document in the blog/ folder. The filename is important. It determines the date of the blog entry and the URL. The syntax is:

bq. YYYY-MM-DD-URL.textile

You cannot use dots in the URL.

For example:

bq. 2011-10-02-announcing-arquillian-1-0.textile

h3. Prolog

The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata:

* layout (always "blog")
* title (use sentence captialization)
* author
* tags (array structure, limit to 5, use singular forms as in "release")

Here's an example (refer to HTML output):

pre. ---
layout: blog
title: Announcing Arquillian 1.0!
author: Aslak Knutsen
tags: [ announcements, releases ]
--- << only copy the hyphens and the lines of text between them

h3. Content

Below the prolog, you just type in textile format.

To insert syntax highlighted code, followed by paragraph text, use the following syntax (refer to HTML output of this guide):

pre. bc(prettify).. public class Alien {
    public String getName() {
        return "Ike";
    }
}

pre. p. This sentence will appear below the code.

You don't normally need to use the p. prefix to enter a paragrah. However, it's required after a code block to indicate to the parser that the code snippet has ended. If the content following the code is not paragraph text (for instance, a list item), use notextile. instead of p., but include one space at the end of the line.

The language is detected automatically.

If you are running awestruct in preview mode, you need to touch the blog/index.html.haml file to see the blog show up in the index (likely a bug).

h3. Images

Images should be put in the images/blog/ folder. An image should be no more than 550px wide.

h2. TODO

* each feature should link to "show this feature in tutorial"
* release blog author lookup (we have a conflict, failing to parse)
* look of module pages
* how to link to release notes from anywhere
* Remove images from features page or find images
* Don't mock me. Write Real Tests. on home page
* finish porting blogs (see blog-entries-to-port.txt)
* auto-generate sidebar navigation for guide (via jQuery or generator?)
* guides
** running showcase examples
** arquillian forge plugin
** jpa
** drone
** use container adapter standalone 
* add "Release Date" as part of "Latest Release"
* "arquillian tests can run right alongside unit tests" on features page
* latest version of each container and latest arquillian release on which it works
* tutorial versions? (best to do it by major arquillian release)
* materialize cdn javascript to _site/javascripts and rewrite src url
* sprites

h2. Considering

* add background-color on the directory listing in guides?
* could do div(filename). %src/test/java/MyTest.java%
* tabs for features
* jboss testing guild?

h2. To fix

* sidebar kicks upwards out of view when refresh from bottom of page
** need general cleanup of this code anyway
* get footer to stick to bottom on short pages
* find way to remove duplicate markup for blog index and entry
* remove inline CSS hacks
* JBoss Community button needs to be better integrated. is it an action?
* reenable sassy-buttons when awestruct can use compass 0.11
* can't get filename block to overlap code block
* image-url is not resolving properly
* make interwiki syntax more concise, if possible (currently "ARQ-100":issue://ARQ-100)
* bullets in blockquote not supported by textile, workaround is ugly
* blog index & home page does not refresh after writing new blog entry (need to touch files)
* get awestruct to enable no_span_caps in textile (or honor config option)

h2. Awestruct requests

* use :no_span_caps in Awestruct

h2. Extension Ideas

* Events from lanyrd (need to pull ical, then process)
* Nobles extension from config
* interwiki links (like JIRA, Github resource, etc)
* Fork me on github ribbon
* Guides similar to the Posts extension

h2. Resources

* Currently using Google Prettify, could use "jQuery wrapper":http://balupton.github.com/jquery-syntaxhighlighter
* Icons from Faenza Gnome icon theme
